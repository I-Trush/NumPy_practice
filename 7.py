import numpy as np

a = np.arange(20)
print(a)
print(a[3:15:2])
print(a[3:15])

b = a[3:15]
print(b)
b[2]=100
print(a)
# срез массива в NumPy возвращает представление массива
# операция b=a[:] не создаст копию массива

x = [
    [1,2,3],
    [4,5,6],
    [7,8,9]
]
print(x[1][1])
# print(x[1,1]) # в purePython так не работает
print('===========')
a = np.array(x)
print(a)
print(a[1,1])
print('===========')
print(a[1][1])
# в NumPy работают оба способа обращения к эл-там Nмерного массива
print('===========')

print(a[0,0:2])
print(a[0,:2])
print(a[0,:3])  # почему-то срез индексируется по порядковому номеру
print('===========')

print(a[0])
print(a[1])
print(a[0:1])   #[[1 2 3]]

# если хотим взять столбец
print(a[:,1])
print('===========')
# перебор эл-тов массива
for row in a:
    for el in row:
        print(el)

print('===========')

# либо можно сперва выстроить эл-ты N-мерного массива в вектор, и потом их перебрать a.flat
for val in a.flat:
    print(val)

print(a.flat)
print('===========')


a = np.arange(1,82).reshape(3,3,3,3)
print(a)
print('================')
print(a[:,1,:,:])
# взяли все эл-ты по 0 1 и 3 оси
print('================')

print(a[0,0])
print(a[0,0,:,:])
print('================')

print(a[:,:,0,0])
print(a[...,0,0])

#==============================
print('================')


